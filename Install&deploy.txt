1. Launch an instance from an Amazon Linux 2 or Amazon Linux AMI.
    - Amazon Linux 2 Kernel 5.10 AMI 2.0.20230628.0 x86_64 HVM gp2
    - t2.medium (Instance type)

2. Connect to your instance using SSH. 
   Update the packages and package caches.
   - sudo su - #you have to root user  
   - yum update -y

3. Install docker 
   - yum install -y docker 
   - systemctl status docker
   - systemctl enable docker
   - systemctl start docker
   #Check status of docker 
   - systemctl status docker

4. Install Conntrack (Conntrack is needed for minikube.)
   Conntrack : is a short for Connection Tracking, is a crucial component in Kubernetes networking that is required for reliable communication between containers and services. It is responsible for tracking network connections and their states, allowing the Kubernetes networking stack to function properly.

   - yum install conntrack -y 
   - conntrack --version

5. Download the latest version of Minikube & Kubectl for the Linux platform.
   #Get Minikube
   - curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

   #Install Minikube
   - install minikube-linux-amd64 /usr/local/bin/minikube

   #start Minikube 
   - /usr/local/bin/minikube start --force --driver=docker

   #Kubernetes is a platform which is running on docker. Docker is helping Kubernetes to run.

   #check version of minikube
   - /usr/local/bin/minikube version

   #Install kubectl
   - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
   
   #Install kubectl & giving permissions to kubectl.
   - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

   #check version of kubectl
   - /usr/local/bin/kubectl version

6. Make Database
   #install Git 
   - yum install -y git
   - git --version

   #clone the repository for code. 
   - cd /opt/
   - git clone https://github.com/Chukkavijay/springboot-k8s-project-1.git
   
   Now we will start setting up the Database.
   #confirm there is any pods runing or not 
   - /usr/local/bin/kubectl get pods

   #create db-pod using db-deployment.yaml 
   - /usr/local/bin/kubectl create -f db-deployment.yaml

   #now check pod runing or not 
   - /usr/local/bin/kubectl get pods

   #Check database (go inside the container)
   - /usr/local/bin/kubectl exec -it <your_pod_name/pod_id> /bin/bash
   #/usr/local/bin/kubectl exec -it mysql-f759455cd-n5gw6 /bin/bash

   #enter into mysql db
   - mysql -u root -p
   #password:root

   #check databases like 
   - show databases;
   - use singamlabs;
   - show tables;
   #you absurve that empty data
   #comeout of mysql,then pod.

7. Now using docker we build an image and push to docker registry.

   #check there is docker images 
   - docker images

   #build an image using Dockerfile
   - docker build -t chukkavijay/springboot-crud-k8s:1.0 .

   #docker login
    username:
    password:
    after succesfully login 
   
   #Push docker Image to docker registry
   - docker push chukkavijay/springboot-crud-k8s:1.0

   #We build an pod out an this(chukkavijay/springboot-crud-k8s) image.

   #Create application pod & service using app-deployment.yaml.
   - /usr/local/bin/kubectl apply -f app-deployment.yaml

   #Check there is pods running or not 
   - /usr/local/bin/kubectl get pods
   
   #Check service of deployment
   - /usr/local/bin/kubectl get svc

   /usr/local/bin/minikube ip

   PORT-FORWARDING
   Port forwarding is a networking technique used to redirect network traffic from one port on a host to another port on a different host or the same host. In the context of Kubernetes, port forwarding allows you to access services running inside a Kubernetes cluster from your local machine or another remote host.

   - kubectl port-forward --address 0.0.0.0 svc/{your service name} {external port to the Internet}:{your service port, the port your app is listening on in it's container}

   - /usr/local/bin/kubectl port-forward --address 0.0.0.0 svc/springboot-crud-svc 8080:8080 &

   #Now if you go and check on postman. You wonâ€™t be able to access because you have not opened the port for the server.
   #Goto Security group
   #As testing perpose
   #you can allow alltraffic or 
   #Enable port 8080,8001 add a rule like 
   type         protocol   Port range   Source 
   custome TCP    TCP        8080       anywhare from ip4

   POSTMAN
   #POST method: 
   #http://3.84.32.161:8081/orders
   #body
    #raw
      {
    "name": "range",
    "qty": 2,
    "price": 300
      }
    #send

   #GET method:
   #http://3.84.32.161:8081/orders/4

   #You can check db-pod in mysql data
   #Check database (go inside the container)
   - /usr/local/bin/kubectl exec -it <your_pod_name/pod_id> /bin/bash
   #/usr/local/bin/kubectl exec -it mysql-f759455cd-n5gw6 /bin/bash

   #enter into mysql db
   - mysql -u root -p
   #password:root

   #check databases like 
   - show databases;
   - use singamlabs;
   - show tables;
   - select * from orders_tbl;
   #you will see the data 
   #comeout of mysql,then pod.

  #Now we will open the Dashboard of K8S.
 
  Open a new terminal of your server and then perform this command.
  Inside EC2 our minikube is running so we are setting a proxy for all the local address.

  - /usr/local/bin/kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'

   http://127.0.0.1:40575/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/
   change the IP address with your EC2 server IP address and port 8081.
   In my case:
   http://3.84.32.161:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/    

  # Thank You Done MY Project 
  # special Thanks to @PraveenSingampalli
  #here is video https://www.youtube.com/live/fS_hfNV5wEQ?feature=share
